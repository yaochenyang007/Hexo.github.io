<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[字符串常用方法]]></title>
    <url>%2F2018%2F11%2F22%2Fjs%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[JS字符串常用方法concat() :连接字符串 chatAt() :返回指定索引位置的字符，若索引越界，返回空字符串 substr(fromIndex,length)获取部分字符串:从起始索引fromIndex开始截取长度length的字符串 indexOf(),lastindexOf()：找到匹配项返回索引值（一定是绝对位置），如果没找到返回-1 substring(startIndex,endIndex):获取部分字符串截取 起始索引startIndex 到 结束索引endIndex的子字符串， 结果包含startIndex处的字符，不包含endIndex处的字符。 slice(startIndex,endIndex):获取部分字符串截取 起始索引startIndex 到 结束索引endIndex的子字符串，结果包含startIndex处的字符，不包含endIndex处的字符。 split()分割:按给定字符串分割，返回分割后的多个字符串组成的字符串数组。 join()合并:使用您选择的分隔符将一个数组合并为一个字符串 大小写 toLowerCase(), toUpperCase() replace(exp,a)myString = &quot;boy &amp; girl&quot;; myString.replace(/(\w+)\s*&amp;\s*(\w+)/g, &quot;$2 &amp; $1&quot;) //girl &amp; boy replace(exp,a) 第二个参数为函数]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS 中判断空值 undefined 和 null]]></title>
    <url>%2F2018%2F11%2F22%2FJS-%E4%B8%AD%E5%88%A4%E6%96%AD%E7%A9%BA%E5%80%BC-undefined-%E5%92%8C-null%2F</url>
    <content type="text"><![CDATA[JS 中 undefined 和 null 判断JS 中如何判断 undefined以下是不正确的用法： 12345var exp = undefined;if (exp == undefined)&#123; alert(&quot;undefined&quot;);&#125; exp 为 null 时，也会得到与 undefined 相同的结果，虽然 null 和 undefined 不一样。注意：要同时判断 undefined 和 null 时可使用本法。 以下是不正确的用法： 12345var exp = undefined;if (typeof(exp) == undefined)&#123; alert(&quot;undefined&quot;);&#125; 以下是正确的用法：12345var exp = undefined;if (typeof(exp) == &quot;undefined&quot;)&#123; alert(&quot;undefined&quot;);&#125; JS 中如何判断 null以下是不正确的用法： 12345var exp = null; if (exp == null) &#123; alert(“is null”); &#125; exp 为 undefined 时，也会得到与 null 相同的结果，虽然 null 和 undefined 不一样。注意：要同时判断 null 和 undefined 时可使用本法。12345var exp = null; if (!exp) &#123; alert(“is null”); &#125; 如果 exp 为 undefined 或者数字零，也会得到与 null 相同的结果，虽然 null 和二者不一样。注意：要同时判断 null、undefined 和数字零时可使用本法。 12345var exp = null; if (typeof(exp) == “null”) &#123; alert(“is null”); &#125; 为了向下兼容，exp 为 null 时，typeof 总返回 object。 12345var exp = null; if (isNull(exp)) &#123; alert(“is null”); &#125; JavaScript 中没有 isNull 这个函数。 以下是正确的用法： 12345var exp = null; if (!exp &amp;&amp; typeof(exp)!=”undefined” &amp;&amp; exp!=0) &#123; alert(“is null”); &#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex布局]]></title>
    <url>%2F2018%2F10%2F10%2Fflex%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[flex布局1.flex-direction:决定主轴的方向（即项目的排列方向）。 row（默认值）：主轴为水平方向，起点在左端。row-reverse：主轴为水平方向，起点在右端。column：主轴为垂直方向，起点在上沿。column-reverse：主轴为垂直方向，起点在下沿 2.flex-wrap:排序方式 nowrap（默认）：不换行。wrap 换行，第一行在上方。wrap-reverse：换行，第一行在下方。 3.flex-flow:flex-direction||flex-wrap 默认row nowrap 4.justify-content:定义了项目在主轴上的对齐方式。 flex-start（默认值）：左对齐flex-end：右对齐center： 居中space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 5.align-items属性定义项目在交叉轴上如何对齐。 flex-start：交叉轴的起点对齐。flex-end：交叉轴的终点对齐。center：交叉轴的中点对齐。baseline: 项目的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 6.align-content定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 flex-start：与交叉轴的起点对齐。flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue插件使用]]></title>
    <url>%2F2018%2F10%2F10%2Fvue%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Loading 加载 插件开发通过全局方法 Vue.use() 使用插件。它需要在你调用 new Vue() 启动应用之前完成： 123456// 调用 `MyPlugin.install(Vue)`Vue.use(MyPlugin)new Vue(&#123; //... options&#125;) 代码源码（vue-cli 脚手架生成单页面项目）： @/components/public/varMess.vue 文件 123456789101112131415161718192021&lt;template&gt; &lt;transition name=&quot;varMess-fade&quot;&gt; &lt;div class=&quot;varMess&quot; v-show=&quot;isShow&quot;&gt; &lt;img class=&quot;message_img&quot; src=&quot;../img/loading.png&quot;&gt; &lt;div class=&quot;message_group&quot;&gt; &lt;p&gt;&#123;&#123;messText&#125;&#125;&lt;/p&gt; &lt;!-- &lt;el-button @click=&quot;isShow = false&quot;&gt;123&lt;/el-button&gt; --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/transition&gt;&lt;/template&gt;&lt;script&gt; export default &#123; props:[&apos;isShow&apos;,&apos;messText&apos;], methods:&#123; &#125; &#125;&lt;/script&gt; @/components/public/index.js 文件 12345678910import varMess from &apos;./varMess.vue&apos;// 这里是重点const VarMess = &#123; install: function(Vue) &#123; Vue.component(&apos;varMess&apos;, varMess) &#125;&#125;// 导出组件export default VarMess main.js文件 注册插件12import varMess from &apos;@/components/public/varMess&apos;;Vue.use(varMess); 使用插件： 1&lt;varMess :isShow=&quot;isShow&quot; messText=&quot;点位加载中，请稍后...&quot;&gt;&lt;/varMess&gt; 显示效果：]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 基本操作命令]]></title>
    <url>%2F2018%2F10%2F10%2Flinux-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Linux ,免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian 安装VMware 或 VirtualBox 虚拟机。 常用指令 ls 显示文件或目录mkdir 创建目录cd 切换目录touch 创建空文件echo 创建带有内容的文件cat 查看文件内容cp 拷贝mv 移动或重命令rm 删除文件 -r 递归删除，可删除子目录及文件 -f 强制删除find 在文件系统中搜索某文件rmdir 删除空目录pwd 显示当前目录 vim使用vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。 命令模式下： :q 退出 :q! 强制退出 :wq 保存并退出 文件权限管理三种基本权限 R 读 数值表示为4 W 写 数值表示为2 X 可执行 数值表示为1 系统管理命令 stat 显示指定文件的详细信息，比ls更详细 who 显示在线登陆用户 whoami 显示当前操作用户 hostname 显示主机名 uname 显示系统信息 du 查看目录大小 du -h /home带有单位显示目录信息 df 查看磁盘大小 df -h 带有单位显示磁盘信息 ifconfig 查看网络情况 ping 测试网络连通 netstat 显示网络状态信息 clear 清屏 alias 对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit top 动态显示当前耗费资源最多进程信息 ps 显示瞬间进程状态 ps -aux kill 杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。 压缩解压缩命令liunx服务器上默认没有安装zip命令，所以使用时需安装： apt-get install zip 或 yum install zip linux安装unzip命令： apt-get install unzip 或 yum install unzip 压缩 服务器上当前目录为xxx.zip文件 zip -r xxx.zip 解压 服务器上当前目录为xxx.zip文件 unzip -r xxx.zip 压缩 tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar tar -czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2 tar -cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z 解压 tar -xvf file.tar //解压 tar包 tar -xzvf file.tar.gz //解压tar.gz tar -xjvf file.tar.bz2 //解压 tar.bz2 tar -xZvf file.tar.Z //解压tar.Z tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar tar -czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2 tar -cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法练习]]></title>
    <url>%2F2018%2F09%2F26%2Fmarkdown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[熟悉markdown 语法链接hello word文晨科技 有序列表 1.2.31.列表内容2.列表内容3.列表内容 加载http网络图片 加载本地图片 无序列表 列表内容 列表内容 列表内容 代码块1hello word ycy 斜体，加粗，删除线 _ (斜体) ， (加粗) ， （斜体加粗），~~（删除线）这是倾斜的文字这是倾斜的文字1这是加粗 这是斜体加粗的文字这是加删除线的文字 引用 这是引用的内容 分割线 ***， — ，_ _ _** （号）— （减号）_ _ _ （下划线） 表格 （冒号写在左边表示左对齐 ，右边为右对齐，两边都写表示居中） 表头 表头 表头 内容 内容 内容 内容 内容 内容 流程图定义元素的语法 tag=&gt;type: content:&gt;url; 1.tag 是流程图中的标签，在第二段连接元素时会用到。名称可以任意，一般为流程的英文缩写和数字的组合。2.type 用来确定标签的类型，=&gt;后面表示类型。由于标签的名称可以任意指定，所以要依赖type来确定标签的类型标签有6种类型：start end operation condition inputoutput subroutine3.content 是流程图文本框中的描述内容，: 后面表示内容，中英文均可。特别注意，冒号与文本之间一定要有个空格4.url是一个连接，与框框中的文本相绑定，:&gt;后面就是对应的 url 链接，点击文本时可以通过链接跳转到 url 指定页面 1.开始st=&gt;start: 开始 2.结束 e=&gt;end: 结束 3.操作 op1=&gt;operation: 操作、执行说明 4.条件 cond=&gt;condition: 确认？ 5.输入输出 io=&gt;inputoutput: catchsomething… 6.子程序 sub1=&gt;subroutine: My Subroutine 7.URL e=&gt;点击本结束跳转:&gt; +使用 -&gt; 来连接两个元素+对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)+每个元素可以制定分支走向，默认向下，也可以用right指向右边，如示例中sub1(right)。 st=&gt;start: 生产者线程进入 :&gt;www.wenchenkj.com op1=&gt;operation: 设置Info类的名称和内容 op2=&gt;operation: 修改标志位 op3=&gt;operation: 等待线程唤醒 op4=&gt;operation: 等待消费者取走 cond=&gt;condition: 判断标志位 st(right)-&gt;cond-&gt;op1-&gt;op2-&gt;op3 cond(yes,right)-&gt;op1 cond(no)-&gt;op4 上面的流程图使用了URL点击上面的的开始框(生产者线程进入)，就会跳转到我的博客首页www.wenchenkj.com。这里再强调一下：每一个元素都可以加上right指明流程流程图的方向，如果不指定的话默认是向下的]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: DeploymentWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于vue的打印]]></title>
    <url>%2F2018%2F04%2F12%2F%E5%9F%BA%E4%BA%8Evue%E7%9A%84%E6%89%93%E5%8D%B0%2F</url>
    <content type="text"><![CDATA[业务需求：目前开发的财务ERP系统，跟金蝶友商类似。科目打印需自动拼接上辅助核算，如科目有外币需打印外币 插图：先用需要打印的页面用canvas画出 传成pdf 之后后台配合预览打印pdf。步骤一：安装2个依赖 1npm install jspdf html2canvas -D 步骤二：基于jspdf与html2canvas封装一个全局打印方法 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123import html2Canvas from &apos;html2canvas&apos;import JsPDF from &apos;jspdf&apos;import axios from &apos;axios&apos; //把pdf传给后台import qs from &apos;qs&apos;//需要转换 用JOSN.stringify()不行export default &#123; install(Vue, options) &#123;Vue.prototype.getPdf= function (dom) &#123; // var title = this.htmlTitle html2Canvas(document.querySelector(dom), &#123; allowTaint: true &#125;).then(function (canvas) &#123; let contentWidth = canvas.width let contentHeight = canvas.height //一页pdf显示html页面生成的canvas高度; let pageHeight = contentWidth / 595.28 * 841.89 //未生成pdf的html页面高度 let leftHeight = contentHeight //页面偏移 let position = 0 //a4纸的尺寸[595.28,841.89]，html页面生成的canvas在pdf中图片的宽高 let imgWidth = 595.28 let imgHeight = 592.28 / contentWidth * contentHeight let pageData = canvas.toDataURL(&apos;image/jpeg&apos;, 1.0) // 三个参数，第一个方向，第二个尺寸，第三个尺寸格式 let PDF = new JsPDF(&apos;&apos;, &apos;pt&apos;, &apos;a4&apos;) //有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89) //当内容未超过pdf一页显示的范围，无需分页 if (leftHeight &lt; pageHeight) &#123; PDF.addImage(pageData, &apos;JPEG&apos;, 0, 0, imgWidth, imgHeight) &#125; else &#123; while (leftHeight &gt; 0) &#123; PDF.addImage(pageData, &apos;JPEG&apos;, 0, position, imgWidth, imgHeight) leftHeight -= pageHeight position -= 841.89 //避免添加空白页 if (leftHeight &gt; 0) &#123; PDF.addPage() &#125; &#125; &#125; var instance = axios.create(&#123; timeout: 10000,headers: &#123;&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;&#125; &#125;);instance.post(axios.defaults.baseURL+&apos;/file/savepdf&apos;,qs.stringify(&#123;//这个有毒，output输出文件流，PDF.output(&apos;datauristring&apos;)输出base64文件流。file:PDF.output(&apos;datauristring&apos;)//base64的文件流 &#125;)) .then(function (response) &#123;window.open(axios.defaults.baseURL+&apos;/file/showpdf/&apos;+response.data.data.uri)//在新的窗口打开 // let dom=document.createElement(&apos;a&apos;); // dom.setAttribute(&apos;href&apos;,axios.defaults.baseURL+&apos;/file/showpdf/&apos;+response.data.data.uri); // dom.setAttribute(&apos;target&apos;,&apos;_blank&apos;); // dom.click();//模拟新的窗口打开 &#125;) .catch(function (error) &#123; console.log(error); &#125;); &#125;) &#125; &#125;&#125; 步骤三：调用 //打印凭证123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120 printVoucher() &#123; //日期 let Voucherdate = new Date(this.pickerOptionsValue); let tableData = this.childData; //整个视图数据 let trData = this.childData.trData; //列数据 //拼凑数据供打印使用,凭证头，尾信息 this.voucherHFdata = &#123; voucherTitle: &quot;记账凭证&quot;, //记账凭证 billNum: this.billNum, //附件数 accbookName: this.$store.state.accbookName, //账套名 date: Voucherdate.getFullYear() + &quot;-&quot; + (Voucherdate.getMonth() + 1) + &quot;-&quot; + Voucherdate.getDate(), //日期 voucherNumber: this.voucherName + &quot;-&quot; + this.voucherNumberValue, //凭证号：大-16 lotal: tableData.DeCr_Total, //合计 supervisor: &quot;&quot;, //主管 cashier: &quot;&quot;, //出纳 auditor: &quot;&quot;, //审核 producer: this.$store.state.voucherProducer //制单 &#125;; //需打印的列数据过滤 // let listData = []; trData.forEach((n, i) =&gt; &#123; //科目是否有辅助核算，有辅助核算，拼接上辅助核算eg:1001 库存现金_销售部 let subjectVal = n.subject.val + (n.subject.auxData.length &gt; 0 ? &quot;_&quot; : &quot;&quot;) + n.subject.auxData .map(item1 =&gt; &#123; return ( item1.options.filter(item2 =&gt; &#123; if (item1.value === item2.uid) return item2; &#125;)[0].name || &quot;&quot; ); &#125;) .join(&quot;_&quot;); //是否有外币，没有外币显示空。有外币匹配过滤出外币名称eg：RMB let curName = n.currency.currencyOptions .filter(item =&gt; &#123; if (item.value === n.currency.currencyValue) return item; &#125;) .map(item =&gt; &#123; return item.label; &#125;)[0] || &quot;&quot;; this.listData[i] = &#123; abstract: n.abstract.val, //摘要 subject: subjectVal, //科目是否有辅助核算，有辅助核算，拼接上辅助核算 currencyName: curName, //是否有外币，没有外币显示空。有外币匹配过滤出外币名称eg：RMB showCur:n.currency.show,//false不显示 exchangeRate: n.currency.exchangeRate, //汇率 original: n.currency.original, //原币 deVal: n.DeCr.De_val, //借方金额 crVal: n.DeCr.Cr_val//贷方金额 &#125;; &#125;);this.$refs.print.printvoucher(); //打印 &#125;, 模板：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113export default &#123; name: &quot;printVoucher&quot;, props: [&quot;voucherHFdata&quot;, &quot;listData&quot;], data() &#123; return &#123; // htmlTitle: &quot;voucher&quot; tableData:[], hascur:false, &#125;; &#125;, mounted() &#123;&#125;, methods: &#123; printvoucher() &#123; this.voucher5tr( setTimeout(()=&gt;&#123; this.getPdf(&quot;#printVoucher&quot;); &#125;,1000) ); &#125;, //每5列切成一张凭证voucher5tr() &#123; let tr5 = []; //[[&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]]一维变多维 let tr = this.listData; let index = 0; tr.forEach((n, i) =&gt; &#123; if (!tr5[index]) &#123; tr5[index] = []; &#125; tr5[index].push(n); if (tr5[index].length === 5) &#123; index++; &#125; &#125;); let last = tr5[tr5.length - 1]; for (let i = 0,l = 5 - last.length; i &lt; l; i++) &#123; last.push(&#123; abstract: &quot;&quot;, //摘要 showCur:false,//外币不显示 subject: &quot;&quot;, //科目是否有辅助核算，有辅助核算，拼接上辅助核算 currencyName: &quot;&quot;, //是否有外币，没有外币显示空。有外币匹配过滤出外币名称eg：RMB exchangeRate: &quot;&quot;, //汇率 original: &quot;&quot;, //原币 crVal: &quot;&quot;, //贷方金额 deVal: &quot;&quot; //借方金额 &#125;); &#125; this.tableData=tr5; this.tableData.forEach(n=&gt;&#123; n.forEach(n1=&gt;&#123; if(n1.showCur===true)&#123; this.hascur=true; &#125; &#125;) &#125;) &#125; &#125;&#125;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>npm</tag>
        <tag>vue</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
</search>
